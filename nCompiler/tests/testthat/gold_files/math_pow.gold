#ifndef __nClass_1_CPP
#define __nClass_1_CPP
#include <RcppEigen.h>
#include <Rcpp.h>


#ifndef BEGIN_RCPP
#define BEGIN_RCPP
#endif

#ifndef END_RCPP
#define END_RCPP
#endif

using namespace Rcpp;
#ifndef R_NO_REMAP
#define R_NO_REMAP
#endif
#include <iostream>
#include <nCompiler/nCompiler_Eigen.h>
#include <nCompiler/nCompiler_TBB.h>
#include <Rmath.h>
#include <math.h>
#include "..h"
using namespace Rcpp;
// [[Rcpp::plugins(nCompiler_Eigen_plugin)]]
// [[Rcpp::depends(RcppEigenAD)]]
// [[Rcpp::depends(RcppParallel)]]
// [[Rcpp::depends(nCompiler)]]
// [[Rcpp::depends(Rcereal)]]

Eigen::Tensor<double, 1>  nClass_1::nFun_1_NFID_1 ( Eigen::Tensor<double, 1> arg1, double arg2 )  {
Eigen::Tensor<double, 1> ans;
ans = (arg1).pow(arg2);
return(ans);
}
Eigen::Tensor<double, 1>  nClass_1::nFun_2_NFID_2 ( Eigen::Tensor<int, 1> arg1, double arg2 )  {
Eigen::Tensor<double, 1> ans;
ans = ((arg1).cast<double>()).pow(arg2);
return(ans);
}
Eigen::Tensor<double, 1>  nClass_1::nFun_3_NFID_3 ( Eigen::Tensor<bool, 1> arg1, double arg2 )  {
Eigen::Tensor<double, 1> ans;
ans = ((arg1).cast<double>()).pow(arg2);
return(ans);
}
Eigen::Tensor<double, 2>  nClass_1::nFun_4_NFID_4 ( Eigen::Tensor<double, 2> arg1, double arg2 )  {
Eigen::Tensor<double, 2> ans;
ans = (arg1).pow(arg2);
return(ans);
}
Eigen::Tensor<double, 2>  nClass_1::nFun_5_NFID_5 ( Eigen::Tensor<int, 2> arg1, double arg2 )  {
Eigen::Tensor<double, 2> ans;
ans = ((arg1).cast<double>()).pow(arg2);
return(ans);
}
Eigen::Tensor<double, 2>  nClass_1::nFun_6_NFID_6 ( Eigen::Tensor<bool, 2> arg1, double arg2 )  {
Eigen::Tensor<double, 2> ans;
ans = ((arg1).cast<double>()).pow(arg2);
return(ans);
}
Eigen::Tensor<double, 3>  nClass_1::nFun_7_NFID_7 ( Eigen::Tensor<double, 3> arg1, double arg2 )  {
Eigen::Tensor<double, 3> ans;
ans = (arg1).pow(arg2);
return(ans);
}
Eigen::Tensor<double, 3>  nClass_1::nFun_8_NFID_8 ( Eigen::Tensor<int, 3> arg1, double arg2 )  {
Eigen::Tensor<double, 3> ans;
ans = ((arg1).cast<double>()).pow(arg2);
return(ans);
}
Eigen::Tensor<double, 3>  nClass_1::nFun_9_NFID_9 ( Eigen::Tensor<bool, 3> arg1, double arg2 )  {
Eigen::Tensor<double, 3> ans;
ans = ((arg1).cast<double>()).pow(arg2);
return(ans);
}
Eigen::Tensor<double, 1>  nClass_1::nFun_10_NFID_10 ( Eigen::Tensor<double, 1> arg1, int arg2 )  {
Eigen::Tensor<double, 1> ans;
ans = (arg1).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 1>  nClass_1::nFun_11_NFID_11 ( Eigen::Tensor<int, 1> arg1, int arg2 )  {
Eigen::Tensor<double, 1> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 1>  nClass_1::nFun_12_NFID_12 ( Eigen::Tensor<bool, 1> arg1, int arg2 )  {
Eigen::Tensor<double, 1> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 2>  nClass_1::nFun_13_NFID_13 ( Eigen::Tensor<double, 2> arg1, int arg2 )  {
Eigen::Tensor<double, 2> ans;
ans = (arg1).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 2>  nClass_1::nFun_14_NFID_14 ( Eigen::Tensor<int, 2> arg1, int arg2 )  {
Eigen::Tensor<double, 2> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 2>  nClass_1::nFun_15_NFID_15 ( Eigen::Tensor<bool, 2> arg1, int arg2 )  {
Eigen::Tensor<double, 2> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 3>  nClass_1::nFun_16_NFID_16 ( Eigen::Tensor<double, 3> arg1, int arg2 )  {
Eigen::Tensor<double, 3> ans;
ans = (arg1).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 3>  nClass_1::nFun_17_NFID_17 ( Eigen::Tensor<int, 3> arg1, int arg2 )  {
Eigen::Tensor<double, 3> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 3>  nClass_1::nFun_18_NFID_18 ( Eigen::Tensor<bool, 3> arg1, int arg2 )  {
Eigen::Tensor<double, 3> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 1>  nClass_1::nFun_19_NFID_19 ( Eigen::Tensor<double, 1> arg1, bool arg2 )  {
Eigen::Tensor<double, 1> ans;
ans = (arg1).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 1>  nClass_1::nFun_20_NFID_20 ( Eigen::Tensor<int, 1> arg1, bool arg2 )  {
Eigen::Tensor<double, 1> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 1>  nClass_1::nFun_21_NFID_21 ( Eigen::Tensor<bool, 1> arg1, bool arg2 )  {
Eigen::Tensor<double, 1> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 2>  nClass_1::nFun_22_NFID_22 ( Eigen::Tensor<double, 2> arg1, bool arg2 )  {
Eigen::Tensor<double, 2> ans;
ans = (arg1).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 2>  nClass_1::nFun_23_NFID_23 ( Eigen::Tensor<int, 2> arg1, bool arg2 )  {
Eigen::Tensor<double, 2> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 2>  nClass_1::nFun_24_NFID_24 ( Eigen::Tensor<bool, 2> arg1, bool arg2 )  {
Eigen::Tensor<double, 2> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 3>  nClass_1::nFun_25_NFID_25 ( Eigen::Tensor<double, 3> arg1, bool arg2 )  {
Eigen::Tensor<double, 3> ans;
ans = (arg1).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 3>  nClass_1::nFun_26_NFID_26 ( Eigen::Tensor<int, 3> arg1, bool arg2 )  {
Eigen::Tensor<double, 3> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}
Eigen::Tensor<double, 3>  nClass_1::nFun_27_NFID_27 ( Eigen::Tensor<bool, 3> arg1, bool arg2 )  {
Eigen::Tensor<double, 3> ans;
ans = ((arg1).cast<double>()).pow(static_cast<double>(arg2));
return(ans);
}

// [[Rcpp::export]]
SEXP  new_nClass_1 (  )  {
return(loadedObjectEnv(new_nCompiler_object<nClass_1>()));
}

NCOMPILER_INTERFACE(
nClass_1,
NCOMPILER_FIELDS(),
NCOMPILER_METHODS(
method("nFun1", &nClass_1::nFun_1_NFID_1),
method("nFun2", &nClass_1::nFun_2_NFID_2),
method("nFun3", &nClass_1::nFun_3_NFID_3),
method("nFun4", &nClass_1::nFun_4_NFID_4),
method("nFun5", &nClass_1::nFun_5_NFID_5),
method("nFun6", &nClass_1::nFun_6_NFID_6),
method("nFun7", &nClass_1::nFun_7_NFID_7),
method("nFun8", &nClass_1::nFun_8_NFID_8),
method("nFun9", &nClass_1::nFun_9_NFID_9),
method("nFun10", &nClass_1::nFun_10_NFID_10),
method("nFun11", &nClass_1::nFun_11_NFID_11),
method("nFun12", &nClass_1::nFun_12_NFID_12),
method("nFun13", &nClass_1::nFun_13_NFID_13),
method("nFun14", &nClass_1::nFun_14_NFID_14),
method("nFun15", &nClass_1::nFun_15_NFID_15),
method("nFun16", &nClass_1::nFun_16_NFID_16),
method("nFun17", &nClass_1::nFun_17_NFID_17),
method("nFun18", &nClass_1::nFun_18_NFID_18),
method("nFun19", &nClass_1::nFun_19_NFID_19),
method("nFun20", &nClass_1::nFun_20_NFID_20),
method("nFun21", &nClass_1::nFun_21_NFID_21),
method("nFun22", &nClass_1::nFun_22_NFID_22),
method("nFun23", &nClass_1::nFun_23_NFID_23),
method("nFun24", &nClass_1::nFun_24_NFID_24),
method("nFun25", &nClass_1::nFun_25_NFID_25),
method("nFun26", &nClass_1::nFun_26_NFID_26),
method("nFun27", &nClass_1::nFun_27_NFID_27)
)
)
#endif
#ifndef __nClass_1_H
#define __nClass_1_H
#include <RcppEigen.h>
#include <Rcpp.h>


#ifndef BEGIN_RCPP
#define BEGIN_RCPP
#endif

#ifndef END_RCPP
#define END_RCPP
#endif

using namespace Rcpp;
#ifndef R_NO_REMAP
#define R_NO_REMAP
#endif
#include <Rinternals.h>
#include <nCompiler/nCompiler_Eigen.h>
#include <nCompiler/nCompiler_TBB.h>
#include <nCompiler/nCompiler_class_factory.h>
#include <nCompiler/nCompiler_class_interface.h>

class nClass_1 : public genericInterfaceC<nClass_1> {
public:
Eigen::Tensor<double, 1>  nFun_1_NFID_1 ( Eigen::Tensor<double, 1> arg1, double arg2 );
Eigen::Tensor<double, 1>  nFun_2_NFID_2 ( Eigen::Tensor<int, 1> arg1, double arg2 );
Eigen::Tensor<double, 1>  nFun_3_NFID_3 ( Eigen::Tensor<bool, 1> arg1, double arg2 );
Eigen::Tensor<double, 2>  nFun_4_NFID_4 ( Eigen::Tensor<double, 2> arg1, double arg2 );
Eigen::Tensor<double, 2>  nFun_5_NFID_5 ( Eigen::Tensor<int, 2> arg1, double arg2 );
Eigen::Tensor<double, 2>  nFun_6_NFID_6 ( Eigen::Tensor<bool, 2> arg1, double arg2 );
Eigen::Tensor<double, 3>  nFun_7_NFID_7 ( Eigen::Tensor<double, 3> arg1, double arg2 );
Eigen::Tensor<double, 3>  nFun_8_NFID_8 ( Eigen::Tensor<int, 3> arg1, double arg2 );
Eigen::Tensor<double, 3>  nFun_9_NFID_9 ( Eigen::Tensor<bool, 3> arg1, double arg2 );
Eigen::Tensor<double, 1>  nFun_10_NFID_10 ( Eigen::Tensor<double, 1> arg1, int arg2 );
Eigen::Tensor<double, 1>  nFun_11_NFID_11 ( Eigen::Tensor<int, 1> arg1, int arg2 );
Eigen::Tensor<double, 1>  nFun_12_NFID_12 ( Eigen::Tensor<bool, 1> arg1, int arg2 );
Eigen::Tensor<double, 2>  nFun_13_NFID_13 ( Eigen::Tensor<double, 2> arg1, int arg2 );
Eigen::Tensor<double, 2>  nFun_14_NFID_14 ( Eigen::Tensor<int, 2> arg1, int arg2 );
Eigen::Tensor<double, 2>  nFun_15_NFID_15 ( Eigen::Tensor<bool, 2> arg1, int arg2 );
Eigen::Tensor<double, 3>  nFun_16_NFID_16 ( Eigen::Tensor<double, 3> arg1, int arg2 );
Eigen::Tensor<double, 3>  nFun_17_NFID_17 ( Eigen::Tensor<int, 3> arg1, int arg2 );
Eigen::Tensor<double, 3>  nFun_18_NFID_18 ( Eigen::Tensor<bool, 3> arg1, int arg2 );
Eigen::Tensor<double, 1>  nFun_19_NFID_19 ( Eigen::Tensor<double, 1> arg1, bool arg2 );
Eigen::Tensor<double, 1>  nFun_20_NFID_20 ( Eigen::Tensor<int, 1> arg1, bool arg2 );
Eigen::Tensor<double, 1>  nFun_21_NFID_21 ( Eigen::Tensor<bool, 1> arg1, bool arg2 );
Eigen::Tensor<double, 2>  nFun_22_NFID_22 ( Eigen::Tensor<double, 2> arg1, bool arg2 );
Eigen::Tensor<double, 2>  nFun_23_NFID_23 ( Eigen::Tensor<int, 2> arg1, bool arg2 );
Eigen::Tensor<double, 2>  nFun_24_NFID_24 ( Eigen::Tensor<bool, 2> arg1, bool arg2 );
Eigen::Tensor<double, 3>  nFun_25_NFID_25 ( Eigen::Tensor<double, 3> arg1, bool arg2 );
Eigen::Tensor<double, 3>  nFun_26_NFID_26 ( Eigen::Tensor<int, 3> arg1, bool arg2 );
Eigen::Tensor<double, 3>  nFun_27_NFID_27 ( Eigen::Tensor<bool, 3> arg1, bool arg2 );
};

SEXP  new_nClass_1 (  );


#endif
