#ifndef __nClass_1_CPP
#define __nClass_1_CPP
#include <RcppEigen.h>
#include <Rcpp.h>


#ifndef BEGIN_RCPP
#define BEGIN_RCPP
#endif

#ifndef END_RCPP
#define END_RCPP
#endif

using namespace Rcpp;
#ifndef R_NO_REMAP
#define R_NO_REMAP
#endif
#include <iostream>
#include <nCompiler/nCompiler_Eigen.h>
#include <nCompiler/nCompiler_TBB.h>
#include <Rmath.h>
#include <math.h>
#include "..h"
using namespace Rcpp;
// [[Rcpp::plugins(nCompiler_Eigen_plugin)]]
// [[Rcpp::depends(RcppEigenAD)]]
// [[Rcpp::depends(RcppParallel)]]
// [[Rcpp::depends(nCompiler)]]
// [[Rcpp::depends(Rcereal)]]

int  nClass_1::nFun_1_NFID_1 ( int arg1, int arg2 )  {
int ans;
flex_(ans) = arg1 % arg2;
return(ans);
}
int  nClass_1::nFun_2_NFID_2 ( bool arg1, int arg2 )  {
int ans;
flex_(ans) = static_cast<int>(arg1) % arg2;
return(ans);
}
int  nClass_1::nFun_3_NFID_3 ( int arg1, bool arg2 )  {
int ans;
flex_(ans) = arg1 % static_cast<int>(arg2);
return(ans);
}
int  nClass_1::nFun_4_NFID_4 ( bool arg1, bool arg2 )  {
int ans;
flex_(ans) = static_cast<int>(arg1) % static_cast<int>(arg2);
return(ans);
}
Eigen::Tensor<int, 1>  nClass_1::nFun_5_NFID_5 ( Eigen::Tensor<int, 1> arg1, int arg2 )  {
Eigen::Tensor<int, 1> ans;
ans = arg1 % arg2;
return(ans);
}
Eigen::Tensor<int, 1>  nClass_1::nFun_6_NFID_6 ( Eigen::Tensor<bool, 1> arg1, int arg2 )  {
Eigen::Tensor<int, 1> ans;
ans = (arg1).cast<int>() % arg2;
return(ans);
}
Eigen::Tensor<int, 2>  nClass_1::nFun_7_NFID_7 ( Eigen::Tensor<int, 2> arg1, int arg2 )  {
Eigen::Tensor<int, 2> ans;
ans = arg1 % arg2;
return(ans);
}
Eigen::Tensor<int, 2>  nClass_1::nFun_8_NFID_8 ( Eigen::Tensor<bool, 2> arg1, int arg2 )  {
Eigen::Tensor<int, 2> ans;
ans = (arg1).cast<int>() % arg2;
return(ans);
}
Eigen::Tensor<int, 3>  nClass_1::nFun_9_NFID_9 ( Eigen::Tensor<int, 3> arg1, int arg2 )  {
Eigen::Tensor<int, 3> ans;
ans = arg1 % arg2;
return(ans);
}
Eigen::Tensor<int, 3>  nClass_1::nFun_10_NFID_10 ( Eigen::Tensor<bool, 3> arg1, int arg2 )  {
Eigen::Tensor<int, 3> ans;
ans = (arg1).cast<int>() % arg2;
return(ans);
}
Eigen::Tensor<int, 1>  nClass_1::nFun_11_NFID_11 ( Eigen::Tensor<int, 1> arg1, bool arg2 )  {
Eigen::Tensor<int, 1> ans;
ans = arg1 % static_cast<int>(arg2);
return(ans);
}
Eigen::Tensor<int, 1>  nClass_1::nFun_12_NFID_12 ( Eigen::Tensor<bool, 1> arg1, bool arg2 )  {
Eigen::Tensor<int, 1> ans;
ans = (arg1).cast<int>() % static_cast<int>(arg2);
return(ans);
}
Eigen::Tensor<int, 2>  nClass_1::nFun_13_NFID_13 ( Eigen::Tensor<int, 2> arg1, bool arg2 )  {
Eigen::Tensor<int, 2> ans;
ans = arg1 % static_cast<int>(arg2);
return(ans);
}
Eigen::Tensor<int, 2>  nClass_1::nFun_14_NFID_14 ( Eigen::Tensor<bool, 2> arg1, bool arg2 )  {
Eigen::Tensor<int, 2> ans;
ans = (arg1).cast<int>() % static_cast<int>(arg2);
return(ans);
}
Eigen::Tensor<int, 3>  nClass_1::nFun_15_NFID_15 ( Eigen::Tensor<int, 3> arg1, bool arg2 )  {
Eigen::Tensor<int, 3> ans;
ans = arg1 % static_cast<int>(arg2);
return(ans);
}
Eigen::Tensor<int, 3>  nClass_1::nFun_16_NFID_16 ( Eigen::Tensor<bool, 3> arg1, bool arg2 )  {
Eigen::Tensor<int, 3> ans;
ans = (arg1).cast<int>() % static_cast<int>(arg2);
return(ans);
}

// [[Rcpp::export]]
SEXP  new_nClass_1 (  )  {
return(loadedObjectEnv(new_nCompiler_object<nClass_1>()));
}

NCOMPILER_INTERFACE(
nClass_1,
NCOMPILER_FIELDS(),
NCOMPILER_METHODS(
method("nFun1", &nClass_1::nFun_1_NFID_1),
method("nFun2", &nClass_1::nFun_2_NFID_2),
method("nFun3", &nClass_1::nFun_3_NFID_3),
method("nFun4", &nClass_1::nFun_4_NFID_4),
method("nFun5", &nClass_1::nFun_5_NFID_5),
method("nFun6", &nClass_1::nFun_6_NFID_6),
method("nFun7", &nClass_1::nFun_7_NFID_7),
method("nFun8", &nClass_1::nFun_8_NFID_8),
method("nFun9", &nClass_1::nFun_9_NFID_9),
method("nFun10", &nClass_1::nFun_10_NFID_10),
method("nFun11", &nClass_1::nFun_11_NFID_11),
method("nFun12", &nClass_1::nFun_12_NFID_12),
method("nFun13", &nClass_1::nFun_13_NFID_13),
method("nFun14", &nClass_1::nFun_14_NFID_14),
method("nFun15", &nClass_1::nFun_15_NFID_15),
method("nFun16", &nClass_1::nFun_16_NFID_16)
)
)
#endif
#ifndef __nClass_1_H
#define __nClass_1_H
#include <RcppEigen.h>
#include <Rcpp.h>


#ifndef BEGIN_RCPP
#define BEGIN_RCPP
#endif

#ifndef END_RCPP
#define END_RCPP
#endif

using namespace Rcpp;
#ifndef R_NO_REMAP
#define R_NO_REMAP
#endif
#include <Rinternals.h>
#include <nCompiler/nCompiler_Eigen.h>
#include <nCompiler/nCompiler_TBB.h>
#include <nCompiler/nCompiler_class_factory.h>
#include <nCompiler/nCompiler_class_interface.h>

class nClass_1 : public genericInterfaceC<nClass_1> {
public:
int  nFun_1_NFID_1 ( int arg1, int arg2 );
int  nFun_2_NFID_2 ( bool arg1, int arg2 );
int  nFun_3_NFID_3 ( int arg1, bool arg2 );
int  nFun_4_NFID_4 ( bool arg1, bool arg2 );
Eigen::Tensor<int, 1>  nFun_5_NFID_5 ( Eigen::Tensor<int, 1> arg1, int arg2 );
Eigen::Tensor<int, 1>  nFun_6_NFID_6 ( Eigen::Tensor<bool, 1> arg1, int arg2 );
Eigen::Tensor<int, 2>  nFun_7_NFID_7 ( Eigen::Tensor<int, 2> arg1, int arg2 );
Eigen::Tensor<int, 2>  nFun_8_NFID_8 ( Eigen::Tensor<bool, 2> arg1, int arg2 );
Eigen::Tensor<int, 3>  nFun_9_NFID_9 ( Eigen::Tensor<int, 3> arg1, int arg2 );
Eigen::Tensor<int, 3>  nFun_10_NFID_10 ( Eigen::Tensor<bool, 3> arg1, int arg2 );
Eigen::Tensor<int, 1>  nFun_11_NFID_11 ( Eigen::Tensor<int, 1> arg1, bool arg2 );
Eigen::Tensor<int, 1>  nFun_12_NFID_12 ( Eigen::Tensor<bool, 1> arg1, bool arg2 );
Eigen::Tensor<int, 2>  nFun_13_NFID_13 ( Eigen::Tensor<int, 2> arg1, bool arg2 );
Eigen::Tensor<int, 2>  nFun_14_NFID_14 ( Eigen::Tensor<bool, 2> arg1, bool arg2 );
Eigen::Tensor<int, 3>  nFun_15_NFID_15 ( Eigen::Tensor<int, 3> arg1, bool arg2 );
Eigen::Tensor<int, 3>  nFun_16_NFID_16 ( Eigen::Tensor<bool, 3> arg1, bool arg2 );
};

SEXP  new_nClass_1 (  );


#endif
