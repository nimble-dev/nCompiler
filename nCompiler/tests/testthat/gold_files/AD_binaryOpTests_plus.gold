#ifndef __nClass_1_CPP
#define __nClass_1_CPP
#include <RcppEigen.h>
#include <Rcpp.h>


#ifndef BEGIN_RCPP
#define BEGIN_RCPP
#endif

#ifndef END_RCPP
#define END_RCPP
#endif

using namespace Rcpp;
#ifndef R_NO_REMAP
#define R_NO_REMAP
#endif
#include <iostream>
#include <nCompiler/nCompiler_Eigen.h>
#include <Rmath.h>
#include <math.h>
#include "..h"
using namespace Rcpp;
// [[Rcpp::plugins(nCompiler_Eigen_plugin)]]
// [[Rcpp::depends(RcppEigenAD)]]
// [[Rcpp::depends(nCompiler)]]
// [[Rcpp::depends(Rcereal)]]

double  nClass_1::nFun_1_NFID_1 ( double ARG1_arg1_, double ARG2_arg2_ )  {
double ans;
ans = ARG1_arg1_+ARG2_arg2_;
return(ans);
}
Eigen::Tensor<double, 1>  nClass_1::nFun_2_NFID_2 ( double ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_ )  {
Eigen::Tensor<double, 1> ans;
ans = ARG1_arg1_+ARG2_arg2_;
return(ans);
}
Eigen::Tensor<double, 1>  nClass_1::nFun_3_NFID_3 ( Eigen::Tensor<double, 1> ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_ )  {
Eigen::Tensor<double, 1> ans;
ans = ARG1_arg1_+ARG2_arg2_;
return(ans);
}
Eigen::Tensor<double, 1>  nClass_1::nFun_4_NFID_4 ( Eigen::Tensor<double, 1> ARG1_arg1_, double ARG2_arg2_ )  {
Eigen::Tensor<double, 1> ans;
ans = ARG1_arg1_+ARG2_arg2_;
return(ans);
}
template<class TYPE_>  
TYPE_  nClass_1::nFun1_AD_ ( TYPE_ & ARG1_arg1_, TYPE_ & ARG2_arg2_ )  {
TYPE_ ans;
ans = ARG1_arg1_+ARG2_arg2_;
return(ans);
}
CppAD::ADFun<double> *  nClass_1::nFun1_callForADtaping_ (  )  {
CppAD::AD<double> ARG1_arg1_;
CppAD::AD<double> ARG2_arg2_;
CppAD::AD<double> ANS_;
std::vector<CppAD::AD<double> > ADindependentVars;
std::vector<CppAD::AD<double> > ADresponseVars;
CppAD::ADFun<double> * RETURN_TAPE_;
int netIncrement_;
int i_;
(ADindependentVars).resize(2);
(ADresponseVars).resize(1);
RETURN_TAPE_ = new CppAD::ADFun<double>;
for(i_=1; i_<= static_cast<int>(2); ++i_) {
 ADindependentVars[(i_) - 1] = 1;
}
CppAD::Independent(ADindependentVars);
netIncrement_ = 1;
ARG1_arg1_ = ADindependentVars[(netIncrement_) - 1];
netIncrement_ = netIncrement_+1;
ARG2_arg2_ = ADindependentVars[(netIncrement_) - 1];
netIncrement_ = netIncrement_+1;
ANS_ = nFun1_AD_(ARG1_arg1_, ARG2_arg2_);
netIncrement_ = 1;
ADresponseVars[(netIncrement_) - 1] = ANS_;
netIncrement_ = netIncrement_+1;
RETURN_TAPE_->Dependent(ADindependentVars, ADresponseVars);
RETURN_TAPE_->optimize();
return(RETURN_TAPE_);
}
nCompilerCppADinfoClass &  nClass_1::nFun1_ADargumentTransfer_ ( double ARG1_arg1_, double ARG2_arg2_ )  {
int netIncrement_;
((ADtapeSetup).independentVars).resize(2);
(ADtapeSetup).ADtape = allADtapePtrs_[0];
netIncrement_ = 1;
(ADtapeSetup).independentVars[(netIncrement_) - 1] = ARG1_arg1_;
netIncrement_ = netIncrement_+1;
(ADtapeSetup).independentVars[(netIncrement_) - 1] = ARG2_arg2_;
netIncrement_ = netIncrement_+1;
return(ADtapeSetup);
}
DERIVS_METHOD_DEF(nClass_1,nFun1,nFun1_derivs_,(ARG1_arg1_, ARG2_arg2_),double ARG1_arg1_, double ARG2_arg2_);
template<class TYPE_>  
Eigen::Tensor<TYPE_, 1>  nClass_1::nFun2_AD_ ( TYPE_ & ARG1_arg1_, Eigen::Tensor<TYPE_, 1> ARG2_arg2_ )  {
Eigen::Tensor<TYPE_, 1> ans;
ans = ARG1_arg1_+ARG2_arg2_;
return(ans);
}
CppAD::ADFun<double> *  nClass_1::nFun2_callForADtaping_ (  )  {
CppAD::AD<double> ARG1_arg1_;
Eigen::Tensor<CppAD::AD<double> , 1> ARG2_arg2_;
Eigen::Tensor<CppAD::AD<double> , 1> ANS_;
std::vector<CppAD::AD<double> > ADindependentVars;
std::vector<CppAD::AD<double> > ADresponseVars;
CppAD::ADFun<double> * RETURN_TAPE_;
int netIncrement_;
int i_;
(ARG2_arg2_).resize(7);
(ANS_).resize(7);
(ADindependentVars).resize(8);
(ADresponseVars).resize(7);
RETURN_TAPE_ = new CppAD::ADFun<double>;
for(i_=1; i_<= static_cast<int>(8); ++i_) {
 ADindependentVars[(i_) - 1] = 1;
}
CppAD::Independent(ADindependentVars);
netIncrement_ = 1;
ARG1_arg1_ = ADindependentVars[(netIncrement_) - 1];
netIncrement_ = netIncrement_+1;
for(i_=1; i_<= static_cast<int>(7); ++i_) {
 ARG2_arg2_[(i_) - 1] = ADindependentVars[(netIncrement_) - 1];
 netIncrement_ = netIncrement_+1;
}
ANS_ = nFun2_AD_(ARG1_arg1_, ARG2_arg2_);
netIncrement_ = 1;
for(i_=1; i_<= static_cast<int>(7); ++i_) {
 ADresponseVars[(netIncrement_) - 1] = ANS_[(i_) - 1];
 netIncrement_ = netIncrement_+1;
}
RETURN_TAPE_->Dependent(ADindependentVars, ADresponseVars);
RETURN_TAPE_->optimize();
return(RETURN_TAPE_);
}
nCompilerCppADinfoClass &  nClass_1::nFun2_ADargumentTransfer_ ( double ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_ )  {
int netIncrement_;
int i_;
((ADtapeSetup).independentVars).resize(8);
(ADtapeSetup).ADtape = allADtapePtrs_[1];
netIncrement_ = 1;
(ADtapeSetup).independentVars[(netIncrement_) - 1] = ARG1_arg1_;
netIncrement_ = netIncrement_+1;
for(i_=1; i_<= static_cast<int>(7); ++i_) {
 (ADtapeSetup).independentVars[(netIncrement_) - 1] = ARG2_arg2_[(i_) - 1];
 netIncrement_ = netIncrement_+1;
}
return(ADtapeSetup);
}
DERIVS_METHOD_DEF(nClass_1,nFun2,nFun2_derivs_,(ARG1_arg1_, ARG2_arg2_),double ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_);
template<class TYPE_>  
Eigen::Tensor<TYPE_, 1>  nClass_1::nFun3_AD_ ( Eigen::Tensor<TYPE_, 1> ARG1_arg1_, Eigen::Tensor<TYPE_, 1> ARG2_arg2_ )  {
Eigen::Tensor<TYPE_, 1> ans;
ans = ARG1_arg1_+ARG2_arg2_;
return(ans);
}
CppAD::ADFun<double> *  nClass_1::nFun3_callForADtaping_ (  )  {
Eigen::Tensor<CppAD::AD<double> , 1> ARG1_arg1_;
Eigen::Tensor<CppAD::AD<double> , 1> ARG2_arg2_;
Eigen::Tensor<CppAD::AD<double> , 1> ANS_;
std::vector<CppAD::AD<double> > ADindependentVars;
std::vector<CppAD::AD<double> > ADresponseVars;
CppAD::ADFun<double> * RETURN_TAPE_;
int netIncrement_;
int i_;
(ARG1_arg1_).resize(7);
(ARG2_arg2_).resize(7);
(ANS_).resize(7);
(ADindependentVars).resize(14);
(ADresponseVars).resize(7);
RETURN_TAPE_ = new CppAD::ADFun<double>;
for(i_=1; i_<= static_cast<int>(14); ++i_) {
 ADindependentVars[(i_) - 1] = 1;
}
CppAD::Independent(ADindependentVars);
netIncrement_ = 1;
for(i_=1; i_<= static_cast<int>(7); ++i_) {
 ARG1_arg1_[(i_) - 1] = ADindependentVars[(netIncrement_) - 1];
 netIncrement_ = netIncrement_+1;
}
for(i_=1; i_<= static_cast<int>(7); ++i_) {
 ARG2_arg2_[(i_) - 1] = ADindependentVars[(netIncrement_) - 1];
 netIncrement_ = netIncrement_+1;
}
ANS_ = nFun3_AD_(ARG1_arg1_, ARG2_arg2_);
netIncrement_ = 1;
for(i_=1; i_<= static_cast<int>(7); ++i_) {
 ADresponseVars[(netIncrement_) - 1] = ANS_[(i_) - 1];
 netIncrement_ = netIncrement_+1;
}
RETURN_TAPE_->Dependent(ADindependentVars, ADresponseVars);
RETURN_TAPE_->optimize();
return(RETURN_TAPE_);
}
nCompilerCppADinfoClass &  nClass_1::nFun3_ADargumentTransfer_ ( Eigen::Tensor<double, 1> ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_ )  {
int netIncrement_;
int i_;
((ADtapeSetup).independentVars).resize(14);
(ADtapeSetup).ADtape = allADtapePtrs_[2];
netIncrement_ = 1;
for(i_=1; i_<= static_cast<int>(7); ++i_) {
 (ADtapeSetup).independentVars[(netIncrement_) - 1] = ARG1_arg1_[(i_) - 1];
 netIncrement_ = netIncrement_+1;
}
for(i_=1; i_<= static_cast<int>(7); ++i_) {
 (ADtapeSetup).independentVars[(netIncrement_) - 1] = ARG2_arg2_[(i_) - 1];
 netIncrement_ = netIncrement_+1;
}
return(ADtapeSetup);
}
DERIVS_METHOD_DEF(nClass_1,nFun3,nFun3_derivs_,(ARG1_arg1_, ARG2_arg2_),Eigen::Tensor<double, 1> ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_);
template<class TYPE_>  
Eigen::Tensor<TYPE_, 1>  nClass_1::nFun4_AD_ ( Eigen::Tensor<TYPE_, 1> ARG1_arg1_, TYPE_ & ARG2_arg2_ )  {
Eigen::Tensor<TYPE_, 1> ans;
ans = ARG1_arg1_+ARG2_arg2_;
return(ans);
}
CppAD::ADFun<double> *  nClass_1::nFun4_callForADtaping_ (  )  {
Eigen::Tensor<CppAD::AD<double> , 1> ARG1_arg1_;
CppAD::AD<double> ARG2_arg2_;
Eigen::Tensor<CppAD::AD<double> , 1> ANS_;
std::vector<CppAD::AD<double> > ADindependentVars;
std::vector<CppAD::AD<double> > ADresponseVars;
CppAD::ADFun<double> * RETURN_TAPE_;
int netIncrement_;
int i_;
(ARG1_arg1_).resize(7);
(ANS_).resize(7);
(ADindependentVars).resize(8);
(ADresponseVars).resize(7);
RETURN_TAPE_ = new CppAD::ADFun<double>;
for(i_=1; i_<= static_cast<int>(8); ++i_) {
 ADindependentVars[(i_) - 1] = 1;
}
CppAD::Independent(ADindependentVars);
netIncrement_ = 1;
for(i_=1; i_<= static_cast<int>(7); ++i_) {
 ARG1_arg1_[(i_) - 1] = ADindependentVars[(netIncrement_) - 1];
 netIncrement_ = netIncrement_+1;
}
ARG2_arg2_ = ADindependentVars[(netIncrement_) - 1];
netIncrement_ = netIncrement_+1;
ANS_ = nFun4_AD_(ARG1_arg1_, ARG2_arg2_);
netIncrement_ = 1;
for(i_=1; i_<= static_cast<int>(7); ++i_) {
 ADresponseVars[(netIncrement_) - 1] = ANS_[(i_) - 1];
 netIncrement_ = netIncrement_+1;
}
RETURN_TAPE_->Dependent(ADindependentVars, ADresponseVars);
RETURN_TAPE_->optimize();
return(RETURN_TAPE_);
}
nCompilerCppADinfoClass &  nClass_1::nFun4_ADargumentTransfer_ ( Eigen::Tensor<double, 1> ARG1_arg1_, double ARG2_arg2_ )  {
int netIncrement_;
int i_;
((ADtapeSetup).independentVars).resize(8);
(ADtapeSetup).ADtape = allADtapePtrs_[3];
netIncrement_ = 1;
for(i_=1; i_<= static_cast<int>(7); ++i_) {
 (ADtapeSetup).independentVars[(netIncrement_) - 1] = ARG1_arg1_[(i_) - 1];
 netIncrement_ = netIncrement_+1;
}
(ADtapeSetup).independentVars[(netIncrement_) - 1] = ARG2_arg2_;
netIncrement_ = netIncrement_+1;
return(ADtapeSetup);
}
DERIVS_METHOD_DEF(nClass_1,nFun4,nFun4_derivs_,(ARG1_arg1_, ARG2_arg2_),Eigen::Tensor<double, 1> ARG1_arg1_, double ARG2_arg2_);

// [[Rcpp::export]]
SEXP  new_nClass_1 (  )  {
return(loadedObjectEnv(new_nCompiler_object<nClass_1>()));
}

std::vector<CppAD::ADFun<double> * > nClass_1::allADtapePtrs_;

 initTape_nClass_1::initTape_nClass_1 (  )  {
nClass_1::allADtapePtrs_.push_back(nClass_1::nFun1_callForADtaping_() );
nClass_1::allADtapePtrs_.push_back(nClass_1::nFun2_callForADtaping_() );
nClass_1::allADtapePtrs_.push_back(nClass_1::nFun3_callForADtaping_() );
nClass_1::allADtapePtrs_.push_back(nClass_1::nFun4_callForADtaping_() );
}

initTape_nClass_1 initTape_nClass_1_Object_;

NCOMPILER_INTERFACE(
nClass_1,
NCOMPILER_FIELDS(),
NCOMPILER_METHODS(
method("nFun1", &nClass_1::nFun_1_NFID_1),
method("nFun2", &nClass_1::nFun_2_NFID_2),
method("nFun3", &nClass_1::nFun_3_NFID_3),
method("nFun4", &nClass_1::nFun_4_NFID_4),
method("nFun1_derivs_", &nClass_1::nFun1_derivs_),
method("nFun2_derivs_", &nClass_1::nFun2_derivs_),
method("nFun3_derivs_", &nClass_1::nFun3_derivs_),
method("nFun4_derivs_", &nClass_1::nFun4_derivs_)
)
)
#endif
#ifndef __nClass_1_H
#define __nClass_1_H
#include <RcppEigen.h>
#include <Rcpp.h>


#ifndef BEGIN_RCPP
#define BEGIN_RCPP
#endif

#ifndef END_RCPP
#define END_RCPP
#endif

using namespace Rcpp;
#ifndef R_NO_REMAP
#define R_NO_REMAP
#endif
#include <nCompiler/nCompiler_CppAD.h>
#include <Rinternals.h>
#include <nCompiler/nCompiler_Eigen.h>
#include <nCompiler/nCompiler_class_factory.h>
#include <nCompiler/nCompiler_class_interface.h>

class nClass_1 : public genericInterfaceC<nClass_1> {
public:
  static std::vector<CppAD::ADFun<double> * > allADtapePtrs_;
  nCompilerCppADinfoClass ADtapeSetup;
double  nFun_1_NFID_1 ( double ARG1_arg1_, double ARG2_arg2_ );
Eigen::Tensor<double, 1>  nFun_2_NFID_2 ( double ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_ );
Eigen::Tensor<double, 1>  nFun_3_NFID_3 ( Eigen::Tensor<double, 1> ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_ );
Eigen::Tensor<double, 1>  nFun_4_NFID_4 ( Eigen::Tensor<double, 1> ARG1_arg1_, double ARG2_arg2_ );
template<class TYPE_>  
static TYPE_  nFun1_AD_ ( TYPE_ & ARG1_arg1_, TYPE_ & ARG2_arg2_ );
static CppAD::ADFun<double> *  nFun1_callForADtaping_ (  );
nCompilerCppADinfoClass &  nFun1_ADargumentTransfer_ ( double ARG1_arg1_, double ARG2_arg2_ );
DERIVS_METHOD_DECL(nFun1_derivs_,double ARG1_arg1_, double ARG2_arg2_);
template<class TYPE_>  
static Eigen::Tensor<TYPE_, 1>  nFun2_AD_ ( TYPE_ & ARG1_arg1_, Eigen::Tensor<TYPE_, 1> ARG2_arg2_ );
static CppAD::ADFun<double> *  nFun2_callForADtaping_ (  );
nCompilerCppADinfoClass &  nFun2_ADargumentTransfer_ ( double ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_ );
DERIVS_METHOD_DECL(nFun2_derivs_,double ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_);
template<class TYPE_>  
static Eigen::Tensor<TYPE_, 1>  nFun3_AD_ ( Eigen::Tensor<TYPE_, 1> ARG1_arg1_, Eigen::Tensor<TYPE_, 1> ARG2_arg2_ );
static CppAD::ADFun<double> *  nFun3_callForADtaping_ (  );
nCompilerCppADinfoClass &  nFun3_ADargumentTransfer_ ( Eigen::Tensor<double, 1> ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_ );
DERIVS_METHOD_DECL(nFun3_derivs_,Eigen::Tensor<double, 1> ARG1_arg1_, Eigen::Tensor<double, 1> ARG2_arg2_);
template<class TYPE_>  
static Eigen::Tensor<TYPE_, 1>  nFun4_AD_ ( Eigen::Tensor<TYPE_, 1> ARG1_arg1_, TYPE_ & ARG2_arg2_ );
static CppAD::ADFun<double> *  nFun4_callForADtaping_ (  );
nCompilerCppADinfoClass &  nFun4_ADargumentTransfer_ ( Eigen::Tensor<double, 1> ARG1_arg1_, double ARG2_arg2_ );
DERIVS_METHOD_DECL(nFun4_derivs_,Eigen::Tensor<double, 1> ARG1_arg1_, double ARG2_arg2_);
};

SEXP  new_nClass_1 (  );


class initTape_nClass_1  {
public:
 initTape_nClass_1 (  );
};

extern  initTape_nClass_1 initTape_nClass_1_Object_;


#endif
