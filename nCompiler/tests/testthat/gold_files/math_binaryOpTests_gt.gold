#ifndef __nClass_1_CPP
#define __nClass_1_CPP
#include <RcppEigen.h>
#include <Rcpp.h>


#ifndef BEGIN_RCPP
#define BEGIN_RCPP
#endif

#ifndef END_RCPP
#define END_RCPP
#endif

using namespace Rcpp;
#ifndef R_NO_REMAP
#define R_NO_REMAP
#endif
#include <iostream>
#include <nCompiler/nCompiler_Eigen.h>
#include <Rmath.h>
#include <math.h>
#include "..h"
using namespace Rcpp;
// [[Rcpp::plugins(nCompiler_Eigen_plugin)]]
// [[Rcpp::depends(RcppEigenAD)]]
// [[Rcpp::depends(nCompiler)]]
// [[Rcpp::depends(Rcereal)]]

bool  nClass_1::nFun_1_NFID_1 ( double arg1, double arg2 )  {
bool ans;
flex_(ans) = arg1>arg2;
return(ans);
}
bool  nClass_1::nFun_2_NFID_2 ( int arg1, double arg2 )  {
bool ans;
flex_(ans) = static_cast<double>(arg1)>arg2;
return(ans);
}
bool  nClass_1::nFun_3_NFID_3 ( bool arg1, double arg2 )  {
bool ans;
flex_(ans) = static_cast<double>(arg1)>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_4_NFID_4 ( Eigen::Tensor<double, 1> arg1, double arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_5_NFID_5 ( Eigen::Tensor<int, 1> arg1, double arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_6_NFID_6 ( Eigen::Tensor<bool, 1> arg1, double arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_7_NFID_7 ( Eigen::Tensor<double, 2> arg1, double arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_8_NFID_8 ( Eigen::Tensor<int, 2> arg1, double arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_9_NFID_9 ( Eigen::Tensor<bool, 2> arg1, double arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_10_NFID_10 ( Eigen::Tensor<double, 3> arg1, double arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_11_NFID_11 ( Eigen::Tensor<int, 3> arg1, double arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_12_NFID_12 ( Eigen::Tensor<bool, 3> arg1, double arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
bool  nClass_1::nFun_13_NFID_13 ( double arg1, int arg2 )  {
bool ans;
flex_(ans) = arg1>static_cast<double>(arg2);
return(ans);
}
bool  nClass_1::nFun_14_NFID_14 ( int arg1, int arg2 )  {
bool ans;
flex_(ans) = arg1>arg2;
return(ans);
}
bool  nClass_1::nFun_15_NFID_15 ( bool arg1, int arg2 )  {
bool ans;
flex_(ans) = static_cast<int>(arg1)>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_16_NFID_16 ( Eigen::Tensor<double, 1> arg1, int arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>static_cast<double>(arg2);
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_17_NFID_17 ( Eigen::Tensor<int, 1> arg1, int arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_18_NFID_18 ( Eigen::Tensor<bool, 1> arg1, int arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_19_NFID_19 ( Eigen::Tensor<double, 2> arg1, int arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>static_cast<double>(arg2);
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_20_NFID_20 ( Eigen::Tensor<int, 2> arg1, int arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_21_NFID_21 ( Eigen::Tensor<bool, 2> arg1, int arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_22_NFID_22 ( Eigen::Tensor<double, 3> arg1, int arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>static_cast<double>(arg2);
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_23_NFID_23 ( Eigen::Tensor<int, 3> arg1, int arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_24_NFID_24 ( Eigen::Tensor<bool, 3> arg1, int arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
bool  nClass_1::nFun_25_NFID_25 ( double arg1, bool arg2 )  {
bool ans;
flex_(ans) = arg1>static_cast<double>(arg2);
return(ans);
}
bool  nClass_1::nFun_26_NFID_26 ( int arg1, bool arg2 )  {
bool ans;
flex_(ans) = arg1>static_cast<int>(arg2);
return(ans);
}
bool  nClass_1::nFun_27_NFID_27 ( bool arg1, bool arg2 )  {
bool ans;
flex_(ans) = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_28_NFID_28 ( Eigen::Tensor<double, 1> arg1, bool arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>static_cast<double>(arg2);
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_29_NFID_29 ( Eigen::Tensor<int, 1> arg1, bool arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>static_cast<int>(arg2);
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_30_NFID_30 ( Eigen::Tensor<bool, 1> arg1, bool arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_31_NFID_31 ( Eigen::Tensor<double, 2> arg1, bool arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>static_cast<double>(arg2);
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_32_NFID_32 ( Eigen::Tensor<int, 2> arg1, bool arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>static_cast<int>(arg2);
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_33_NFID_33 ( Eigen::Tensor<bool, 2> arg1, bool arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_34_NFID_34 ( Eigen::Tensor<double, 3> arg1, bool arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>static_cast<double>(arg2);
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_35_NFID_35 ( Eigen::Tensor<int, 3> arg1, bool arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>static_cast<int>(arg2);
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_36_NFID_36 ( Eigen::Tensor<bool, 3> arg1, bool arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_37_NFID_37 ( double arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg2<arg1;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_38_NFID_38 ( int arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg2<static_cast<double>(arg1);
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_39_NFID_39 ( bool arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg2<static_cast<double>(arg1);
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_40_NFID_40 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_41_NFID_41 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_42_NFID_42 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_43_NFID_43 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_44_NFID_44 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_45_NFID_45 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_46_NFID_46 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_47_NFID_47 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_48_NFID_48 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<double, 1> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_49_NFID_49 ( double arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = (arg2).cast<double>()<arg1;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_50_NFID_50 ( int arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg2<arg1;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_51_NFID_51 ( bool arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg2<static_cast<int>(arg1);
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_52_NFID_52 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_53_NFID_53 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_54_NFID_54 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_55_NFID_55 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_56_NFID_56 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_57_NFID_57 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_58_NFID_58 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_59_NFID_59 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_60_NFID_60 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<int, 1> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_61_NFID_61 ( double arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = (arg2).cast<double>()<arg1;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_62_NFID_62 ( int arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = (arg2).cast<int>()<arg1;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_63_NFID_63 ( bool arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg2<arg1;
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_64_NFID_64 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_65_NFID_65 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>(arg2).cast<int>();
return(ans);
}
Eigen::Tensor<bool, 1>  nClass_1::nFun_66_NFID_66 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 1> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_67_NFID_67 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_68_NFID_68 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>(arg2).cast<int>();
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_69_NFID_69 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_70_NFID_70 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_71_NFID_71 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<int>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_72_NFID_72 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<bool, 1> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_73_NFID_73 ( double arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg2<arg1;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_74_NFID_74 ( int arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg2<static_cast<double>(arg1);
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_75_NFID_75 ( bool arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg2<static_cast<double>(arg1);
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_76_NFID_76 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_77_NFID_77 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_78_NFID_78 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_79_NFID_79 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_80_NFID_80 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_81_NFID_81 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_82_NFID_82 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_83_NFID_83 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_84_NFID_84 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<double, 2> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_85_NFID_85 ( double arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg2).cast<double>()<arg1;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_86_NFID_86 ( int arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg2<arg1;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_87_NFID_87 ( bool arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg2<static_cast<int>(arg1);
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_88_NFID_88 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_89_NFID_89 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_90_NFID_90 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_91_NFID_91 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_92_NFID_92 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_93_NFID_93 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_94_NFID_94 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_95_NFID_95 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_96_NFID_96 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<int, 2> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_97_NFID_97 ( double arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg2).cast<double>()<arg1;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_98_NFID_98 ( int arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = (arg2).cast<int>()<arg1;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_99_NFID_99 ( bool arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg2<arg1;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_100_NFID_100 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_101_NFID_101 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>(arg2).cast<int>();
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_102_NFID_102 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_103_NFID_103 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_104_NFID_104 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>(arg2).cast<int>();
return(ans);
}
Eigen::Tensor<bool, 2>  nClass_1::nFun_105_NFID_105 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 2> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_106_NFID_106 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_107_NFID_107 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<int>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_108_NFID_108 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<bool, 2> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_109_NFID_109 ( double arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg2<arg1;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_110_NFID_110 ( int arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg2<static_cast<double>(arg1);
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_111_NFID_111 ( bool arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg2<static_cast<double>(arg1);
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_112_NFID_112 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_113_NFID_113 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_114_NFID_114 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_115_NFID_115 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_116_NFID_116 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_117_NFID_117 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_118_NFID_118 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_119_NFID_119 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_120_NFID_120 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<double, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<double>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_121_NFID_121 ( double arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg2).cast<double>()<arg1;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_122_NFID_122 ( int arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg2<arg1;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_123_NFID_123 ( bool arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg2<static_cast<int>(arg1);
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_124_NFID_124 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_125_NFID_125 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_126_NFID_126 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_127_NFID_127 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_128_NFID_128 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_129_NFID_129 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_130_NFID_130 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_131_NFID_131 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_132_NFID_132 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<int, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg1).cast<int>()>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_133_NFID_133 ( double arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg2).cast<double>()<arg1;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_134_NFID_134 ( int arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = (arg2).cast<int>()<arg1;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_135_NFID_135 ( bool arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg2<arg1;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_136_NFID_136 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_137_NFID_137 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<int>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_138_NFID_138 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_139_NFID_139 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_140_NFID_140 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<int>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_141_NFID_141 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_142_NFID_142 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<double>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_143_NFID_143 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>(arg2).cast<int>();
return(ans);
}
Eigen::Tensor<bool, 3>  nClass_1::nFun_144_NFID_144 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<bool, 3> arg2 )  {
Eigen::Tensor<bool, 3> ans;
ans = arg1>arg2;
return(ans);
}

// [[Rcpp::export]]
SEXP  new_nClass_1 (  )  {
return(loadedObjectEnv(new_nCompiler_object<nClass_1>()));
}

NCOMPILER_INTERFACE(
nClass_1,
NCOMPILER_FIELDS(),
NCOMPILER_METHODS(
method("nFun1", &nClass_1::nFun_1_NFID_1),
method("nFun2", &nClass_1::nFun_2_NFID_2),
method("nFun3", &nClass_1::nFun_3_NFID_3),
method("nFun4", &nClass_1::nFun_4_NFID_4),
method("nFun5", &nClass_1::nFun_5_NFID_5),
method("nFun6", &nClass_1::nFun_6_NFID_6),
method("nFun7", &nClass_1::nFun_7_NFID_7),
method("nFun8", &nClass_1::nFun_8_NFID_8),
method("nFun9", &nClass_1::nFun_9_NFID_9),
method("nFun10", &nClass_1::nFun_10_NFID_10),
method("nFun11", &nClass_1::nFun_11_NFID_11),
method("nFun12", &nClass_1::nFun_12_NFID_12),
method("nFun13", &nClass_1::nFun_13_NFID_13),
method("nFun14", &nClass_1::nFun_14_NFID_14),
method("nFun15", &nClass_1::nFun_15_NFID_15),
method("nFun16", &nClass_1::nFun_16_NFID_16),
method("nFun17", &nClass_1::nFun_17_NFID_17),
method("nFun18", &nClass_1::nFun_18_NFID_18),
method("nFun19", &nClass_1::nFun_19_NFID_19),
method("nFun20", &nClass_1::nFun_20_NFID_20),
method("nFun21", &nClass_1::nFun_21_NFID_21),
method("nFun22", &nClass_1::nFun_22_NFID_22),
method("nFun23", &nClass_1::nFun_23_NFID_23),
method("nFun24", &nClass_1::nFun_24_NFID_24),
method("nFun25", &nClass_1::nFun_25_NFID_25),
method("nFun26", &nClass_1::nFun_26_NFID_26),
method("nFun27", &nClass_1::nFun_27_NFID_27),
method("nFun28", &nClass_1::nFun_28_NFID_28),
method("nFun29", &nClass_1::nFun_29_NFID_29),
method("nFun30", &nClass_1::nFun_30_NFID_30),
method("nFun31", &nClass_1::nFun_31_NFID_31),
method("nFun32", &nClass_1::nFun_32_NFID_32),
method("nFun33", &nClass_1::nFun_33_NFID_33),
method("nFun34", &nClass_1::nFun_34_NFID_34),
method("nFun35", &nClass_1::nFun_35_NFID_35),
method("nFun36", &nClass_1::nFun_36_NFID_36),
method("nFun37", &nClass_1::nFun_37_NFID_37),
method("nFun38", &nClass_1::nFun_38_NFID_38),
method("nFun39", &nClass_1::nFun_39_NFID_39),
method("nFun40", &nClass_1::nFun_40_NFID_40),
method("nFun41", &nClass_1::nFun_41_NFID_41),
method("nFun42", &nClass_1::nFun_42_NFID_42),
method("nFun43", &nClass_1::nFun_43_NFID_43),
method("nFun44", &nClass_1::nFun_44_NFID_44),
method("nFun45", &nClass_1::nFun_45_NFID_45),
method("nFun46", &nClass_1::nFun_46_NFID_46),
method("nFun47", &nClass_1::nFun_47_NFID_47),
method("nFun48", &nClass_1::nFun_48_NFID_48),
method("nFun49", &nClass_1::nFun_49_NFID_49),
method("nFun50", &nClass_1::nFun_50_NFID_50),
method("nFun51", &nClass_1::nFun_51_NFID_51),
method("nFun52", &nClass_1::nFun_52_NFID_52),
method("nFun53", &nClass_1::nFun_53_NFID_53),
method("nFun54", &nClass_1::nFun_54_NFID_54),
method("nFun55", &nClass_1::nFun_55_NFID_55),
method("nFun56", &nClass_1::nFun_56_NFID_56),
method("nFun57", &nClass_1::nFun_57_NFID_57),
method("nFun58", &nClass_1::nFun_58_NFID_58),
method("nFun59", &nClass_1::nFun_59_NFID_59),
method("nFun60", &nClass_1::nFun_60_NFID_60),
method("nFun61", &nClass_1::nFun_61_NFID_61),
method("nFun62", &nClass_1::nFun_62_NFID_62),
method("nFun63", &nClass_1::nFun_63_NFID_63),
method("nFun64", &nClass_1::nFun_64_NFID_64),
method("nFun65", &nClass_1::nFun_65_NFID_65),
method("nFun66", &nClass_1::nFun_66_NFID_66),
method("nFun67", &nClass_1::nFun_67_NFID_67),
method("nFun68", &nClass_1::nFun_68_NFID_68),
method("nFun69", &nClass_1::nFun_69_NFID_69),
method("nFun70", &nClass_1::nFun_70_NFID_70),
method("nFun71", &nClass_1::nFun_71_NFID_71),
method("nFun72", &nClass_1::nFun_72_NFID_72),
method("nFun73", &nClass_1::nFun_73_NFID_73),
method("nFun74", &nClass_1::nFun_74_NFID_74),
method("nFun75", &nClass_1::nFun_75_NFID_75),
method("nFun76", &nClass_1::nFun_76_NFID_76),
method("nFun77", &nClass_1::nFun_77_NFID_77),
method("nFun78", &nClass_1::nFun_78_NFID_78),
method("nFun79", &nClass_1::nFun_79_NFID_79),
method("nFun80", &nClass_1::nFun_80_NFID_80),
method("nFun81", &nClass_1::nFun_81_NFID_81),
method("nFun82", &nClass_1::nFun_82_NFID_82),
method("nFun83", &nClass_1::nFun_83_NFID_83),
method("nFun84", &nClass_1::nFun_84_NFID_84),
method("nFun85", &nClass_1::nFun_85_NFID_85),
method("nFun86", &nClass_1::nFun_86_NFID_86),
method("nFun87", &nClass_1::nFun_87_NFID_87),
method("nFun88", &nClass_1::nFun_88_NFID_88),
method("nFun89", &nClass_1::nFun_89_NFID_89),
method("nFun90", &nClass_1::nFun_90_NFID_90),
method("nFun91", &nClass_1::nFun_91_NFID_91),
method("nFun92", &nClass_1::nFun_92_NFID_92),
method("nFun93", &nClass_1::nFun_93_NFID_93),
method("nFun94", &nClass_1::nFun_94_NFID_94),
method("nFun95", &nClass_1::nFun_95_NFID_95),
method("nFun96", &nClass_1::nFun_96_NFID_96),
method("nFun97", &nClass_1::nFun_97_NFID_97),
method("nFun98", &nClass_1::nFun_98_NFID_98),
method("nFun99", &nClass_1::nFun_99_NFID_99),
method("nFun100", &nClass_1::nFun_100_NFID_100),
method("nFun101", &nClass_1::nFun_101_NFID_101),
method("nFun102", &nClass_1::nFun_102_NFID_102),
method("nFun103", &nClass_1::nFun_103_NFID_103),
method("nFun104", &nClass_1::nFun_104_NFID_104),
method("nFun105", &nClass_1::nFun_105_NFID_105),
method("nFun106", &nClass_1::nFun_106_NFID_106),
method("nFun107", &nClass_1::nFun_107_NFID_107),
method("nFun108", &nClass_1::nFun_108_NFID_108),
method("nFun109", &nClass_1::nFun_109_NFID_109),
method("nFun110", &nClass_1::nFun_110_NFID_110),
method("nFun111", &nClass_1::nFun_111_NFID_111),
method("nFun112", &nClass_1::nFun_112_NFID_112),
method("nFun113", &nClass_1::nFun_113_NFID_113),
method("nFun114", &nClass_1::nFun_114_NFID_114),
method("nFun115", &nClass_1::nFun_115_NFID_115),
method("nFun116", &nClass_1::nFun_116_NFID_116),
method("nFun117", &nClass_1::nFun_117_NFID_117),
method("nFun118", &nClass_1::nFun_118_NFID_118),
method("nFun119", &nClass_1::nFun_119_NFID_119),
method("nFun120", &nClass_1::nFun_120_NFID_120),
method("nFun121", &nClass_1::nFun_121_NFID_121),
method("nFun122", &nClass_1::nFun_122_NFID_122),
method("nFun123", &nClass_1::nFun_123_NFID_123),
method("nFun124", &nClass_1::nFun_124_NFID_124),
method("nFun125", &nClass_1::nFun_125_NFID_125),
method("nFun126", &nClass_1::nFun_126_NFID_126),
method("nFun127", &nClass_1::nFun_127_NFID_127),
method("nFun128", &nClass_1::nFun_128_NFID_128),
method("nFun129", &nClass_1::nFun_129_NFID_129),
method("nFun130", &nClass_1::nFun_130_NFID_130),
method("nFun131", &nClass_1::nFun_131_NFID_131),
method("nFun132", &nClass_1::nFun_132_NFID_132),
method("nFun133", &nClass_1::nFun_133_NFID_133),
method("nFun134", &nClass_1::nFun_134_NFID_134),
method("nFun135", &nClass_1::nFun_135_NFID_135),
method("nFun136", &nClass_1::nFun_136_NFID_136),
method("nFun137", &nClass_1::nFun_137_NFID_137),
method("nFun138", &nClass_1::nFun_138_NFID_138),
method("nFun139", &nClass_1::nFun_139_NFID_139),
method("nFun140", &nClass_1::nFun_140_NFID_140),
method("nFun141", &nClass_1::nFun_141_NFID_141),
method("nFun142", &nClass_1::nFun_142_NFID_142),
method("nFun143", &nClass_1::nFun_143_NFID_143),
method("nFun144", &nClass_1::nFun_144_NFID_144)
)
)
#endif
#ifndef __nClass_1_H
#define __nClass_1_H
#include <RcppEigen.h>
#include <Rcpp.h>


#ifndef BEGIN_RCPP
#define BEGIN_RCPP
#endif

#ifndef END_RCPP
#define END_RCPP
#endif

using namespace Rcpp;
#ifndef R_NO_REMAP
#define R_NO_REMAP
#endif
#include <Rinternals.h>
#include <nCompiler/nCompiler_Eigen.h>
#include <nCompiler/nCompiler_class_factory.h>
#include <nCompiler/nCompiler_class_interface.h>

class nClass_1 : public genericInterfaceC<nClass_1> {
public:
bool  nFun_1_NFID_1 ( double arg1, double arg2 );
bool  nFun_2_NFID_2 ( int arg1, double arg2 );
bool  nFun_3_NFID_3 ( bool arg1, double arg2 );
Eigen::Tensor<bool, 1>  nFun_4_NFID_4 ( Eigen::Tensor<double, 1> arg1, double arg2 );
Eigen::Tensor<bool, 1>  nFun_5_NFID_5 ( Eigen::Tensor<int, 1> arg1, double arg2 );
Eigen::Tensor<bool, 1>  nFun_6_NFID_6 ( Eigen::Tensor<bool, 1> arg1, double arg2 );
Eigen::Tensor<bool, 2>  nFun_7_NFID_7 ( Eigen::Tensor<double, 2> arg1, double arg2 );
Eigen::Tensor<bool, 2>  nFun_8_NFID_8 ( Eigen::Tensor<int, 2> arg1, double arg2 );
Eigen::Tensor<bool, 2>  nFun_9_NFID_9 ( Eigen::Tensor<bool, 2> arg1, double arg2 );
Eigen::Tensor<bool, 3>  nFun_10_NFID_10 ( Eigen::Tensor<double, 3> arg1, double arg2 );
Eigen::Tensor<bool, 3>  nFun_11_NFID_11 ( Eigen::Tensor<int, 3> arg1, double arg2 );
Eigen::Tensor<bool, 3>  nFun_12_NFID_12 ( Eigen::Tensor<bool, 3> arg1, double arg2 );
bool  nFun_13_NFID_13 ( double arg1, int arg2 );
bool  nFun_14_NFID_14 ( int arg1, int arg2 );
bool  nFun_15_NFID_15 ( bool arg1, int arg2 );
Eigen::Tensor<bool, 1>  nFun_16_NFID_16 ( Eigen::Tensor<double, 1> arg1, int arg2 );
Eigen::Tensor<bool, 1>  nFun_17_NFID_17 ( Eigen::Tensor<int, 1> arg1, int arg2 );
Eigen::Tensor<bool, 1>  nFun_18_NFID_18 ( Eigen::Tensor<bool, 1> arg1, int arg2 );
Eigen::Tensor<bool, 2>  nFun_19_NFID_19 ( Eigen::Tensor<double, 2> arg1, int arg2 );
Eigen::Tensor<bool, 2>  nFun_20_NFID_20 ( Eigen::Tensor<int, 2> arg1, int arg2 );
Eigen::Tensor<bool, 2>  nFun_21_NFID_21 ( Eigen::Tensor<bool, 2> arg1, int arg2 );
Eigen::Tensor<bool, 3>  nFun_22_NFID_22 ( Eigen::Tensor<double, 3> arg1, int arg2 );
Eigen::Tensor<bool, 3>  nFun_23_NFID_23 ( Eigen::Tensor<int, 3> arg1, int arg2 );
Eigen::Tensor<bool, 3>  nFun_24_NFID_24 ( Eigen::Tensor<bool, 3> arg1, int arg2 );
bool  nFun_25_NFID_25 ( double arg1, bool arg2 );
bool  nFun_26_NFID_26 ( int arg1, bool arg2 );
bool  nFun_27_NFID_27 ( bool arg1, bool arg2 );
Eigen::Tensor<bool, 1>  nFun_28_NFID_28 ( Eigen::Tensor<double, 1> arg1, bool arg2 );
Eigen::Tensor<bool, 1>  nFun_29_NFID_29 ( Eigen::Tensor<int, 1> arg1, bool arg2 );
Eigen::Tensor<bool, 1>  nFun_30_NFID_30 ( Eigen::Tensor<bool, 1> arg1, bool arg2 );
Eigen::Tensor<bool, 2>  nFun_31_NFID_31 ( Eigen::Tensor<double, 2> arg1, bool arg2 );
Eigen::Tensor<bool, 2>  nFun_32_NFID_32 ( Eigen::Tensor<int, 2> arg1, bool arg2 );
Eigen::Tensor<bool, 2>  nFun_33_NFID_33 ( Eigen::Tensor<bool, 2> arg1, bool arg2 );
Eigen::Tensor<bool, 3>  nFun_34_NFID_34 ( Eigen::Tensor<double, 3> arg1, bool arg2 );
Eigen::Tensor<bool, 3>  nFun_35_NFID_35 ( Eigen::Tensor<int, 3> arg1, bool arg2 );
Eigen::Tensor<bool, 3>  nFun_36_NFID_36 ( Eigen::Tensor<bool, 3> arg1, bool arg2 );
Eigen::Tensor<bool, 1>  nFun_37_NFID_37 ( double arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_38_NFID_38 ( int arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_39_NFID_39 ( bool arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_40_NFID_40 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_41_NFID_41 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_42_NFID_42 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 2>  nFun_43_NFID_43 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 2>  nFun_44_NFID_44 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 2>  nFun_45_NFID_45 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 3>  nFun_46_NFID_46 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 3>  nFun_47_NFID_47 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 3>  nFun_48_NFID_48 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<double, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_49_NFID_49 ( double arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_50_NFID_50 ( int arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_51_NFID_51 ( bool arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_52_NFID_52 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_53_NFID_53 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_54_NFID_54 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 2>  nFun_55_NFID_55 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 2>  nFun_56_NFID_56 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 2>  nFun_57_NFID_57 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 3>  nFun_58_NFID_58 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 3>  nFun_59_NFID_59 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 3>  nFun_60_NFID_60 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<int, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_61_NFID_61 ( double arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_62_NFID_62 ( int arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_63_NFID_63 ( bool arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_64_NFID_64 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_65_NFID_65 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 1>  nFun_66_NFID_66 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 2>  nFun_67_NFID_67 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 2>  nFun_68_NFID_68 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 2>  nFun_69_NFID_69 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 3>  nFun_70_NFID_70 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 3>  nFun_71_NFID_71 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 3>  nFun_72_NFID_72 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<bool, 1> arg2 );
Eigen::Tensor<bool, 2>  nFun_73_NFID_73 ( double arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_74_NFID_74 ( int arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_75_NFID_75 ( bool arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_76_NFID_76 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_77_NFID_77 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_78_NFID_78 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_79_NFID_79 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_80_NFID_80 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_81_NFID_81 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 3>  nFun_82_NFID_82 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 3>  nFun_83_NFID_83 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 3>  nFun_84_NFID_84 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<double, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_85_NFID_85 ( double arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_86_NFID_86 ( int arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_87_NFID_87 ( bool arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_88_NFID_88 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_89_NFID_89 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_90_NFID_90 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_91_NFID_91 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_92_NFID_92 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_93_NFID_93 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 3>  nFun_94_NFID_94 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 3>  nFun_95_NFID_95 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 3>  nFun_96_NFID_96 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<int, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_97_NFID_97 ( double arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_98_NFID_98 ( int arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_99_NFID_99 ( bool arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_100_NFID_100 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_101_NFID_101 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_102_NFID_102 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_103_NFID_103 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_104_NFID_104 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 2>  nFun_105_NFID_105 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 3>  nFun_106_NFID_106 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 3>  nFun_107_NFID_107 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 3>  nFun_108_NFID_108 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<bool, 2> arg2 );
Eigen::Tensor<bool, 3>  nFun_109_NFID_109 ( double arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_110_NFID_110 ( int arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_111_NFID_111 ( bool arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_112_NFID_112 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_113_NFID_113 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_114_NFID_114 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_115_NFID_115 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_116_NFID_116 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_117_NFID_117 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_118_NFID_118 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_119_NFID_119 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_120_NFID_120 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<double, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_121_NFID_121 ( double arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_122_NFID_122 ( int arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_123_NFID_123 ( bool arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_124_NFID_124 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_125_NFID_125 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_126_NFID_126 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_127_NFID_127 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_128_NFID_128 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_129_NFID_129 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_130_NFID_130 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_131_NFID_131 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_132_NFID_132 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<int, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_133_NFID_133 ( double arg1, Eigen::Tensor<bool, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_134_NFID_134 ( int arg1, Eigen::Tensor<bool, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_135_NFID_135 ( bool arg1, Eigen::Tensor<bool, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_136_NFID_136 ( Eigen::Tensor<double, 1> arg1, Eigen::Tensor<bool, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_137_NFID_137 ( Eigen::Tensor<int, 1> arg1, Eigen::Tensor<bool, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_138_NFID_138 ( Eigen::Tensor<bool, 1> arg1, Eigen::Tensor<bool, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_139_NFID_139 ( Eigen::Tensor<double, 2> arg1, Eigen::Tensor<bool, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_140_NFID_140 ( Eigen::Tensor<int, 2> arg1, Eigen::Tensor<bool, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_141_NFID_141 ( Eigen::Tensor<bool, 2> arg1, Eigen::Tensor<bool, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_142_NFID_142 ( Eigen::Tensor<double, 3> arg1, Eigen::Tensor<bool, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_143_NFID_143 ( Eigen::Tensor<int, 3> arg1, Eigen::Tensor<bool, 3> arg2 );
Eigen::Tensor<bool, 3>  nFun_144_NFID_144 ( Eigen::Tensor<bool, 3> arg1, Eigen::Tensor<bool, 3> arg2 );
};

SEXP  new_nClass_1 (  );


#endif
