% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NF.R
\name{nFunction}
\alias{nFunction}
\title{Create a nFunction.}
\usage{
nFunction(fun, name = NA, argTypes = list(), refArgs = list(),
  returnType = NULL, enableDerivs = list(),
  check = get_nOption("check_nFunction"), returnCallable = TRUE,
  where = parent.frame(), ...)
}
\arguments{
\item{fun}{R function to be turned into a nFunction}

\item{name}{An internal name for the nFunction.  If \code{NA}, an internal name will be generated.}

\item{argTypes}{List of argument types declarations.  An alternative is to provide argument types as part of default values in \code{fun}.  See details below.}

\item{refArgs}{Character vector of names of arguments that should be passed by reference instead of by value.  An alternative is to indicate pass-by-reference as part of a type declaration in \code{refArgs} or in default value(s) of \code{fun}.  See details below.}

\item{returnType}{A type declaration for the type returned by \code{fun}.  An alternative is to provide this information with a \code{returnType()} statement in the body of \code{fun}.}

\item{enableDerivs}{Allows derviatives to be obtained automatically.  Currently disabled.}

\item{check}{If \code{TRUE}, \code{fun} will be checked for errors (including anything that cannot be compiled.  (This is currently disabled.)}

\item{returnCallable}{If \code{TRUE}, return a \code{nFunction} object that can be used as a funtion (because it is a function).  If \code{FALSE} (only for advanced debugging), return the internal information of the \code{nFunction}.}

\item{where}{Environment to be used as the closure of the returned \code{nFunction}.}
}
\value{
An object of class \code{nFunction}, which inherits from class \code{function}.
}
\description{
Create a nFunction, which can be compiled via C++ using \link{nCompile_nFunction} or \code{nCompile} (TBD)
}
\details{
A \code{nFunction} is a special kind of R function that can be compiled by automatic generation of C++.  See (TBD) for information about writing \code{nFunctions}.  See (TBD) for information about type declarations.
}
\examples{
\donttest{
rawfoo <- function(a = 5, b) {
    b <- b + a
    return(a) ## explicit use of return() is necessary
}
foo <- nFunction(
    fun = rawfoo,
    argTypes = list(a = "numericScalar()",
                    b = "ref(integerVector())"),
    # First alternative is to provide arguments in \\code{rawfoo} as
    #    function(a = numericScalar(5), b = ref(integerVector()))
    # Second alternative is to use b = integerVector() and provide
    #    refArgs = "b".
    returnType = "numericScalar()"
    # Alternative would be to include "returnType(numericVector())"
    # in \\code{rawfoo}
)
}
}
\seealso{
\cite{\link{NFinternals}} for access to the internal information of a \code{nFunction} (for advanced use only).
}
