//GENERATED BY generatedPredefinedCpp.R. DO NOT EDIT BY HAND
//--------------------------------------
//--------------------------------------
// test_predefined
//--------------------------------------
#ifndef __test_predefined_H
#define __test_predefined_H
#include <RcppEigen.h>
#include <Rcpp.h>


#ifndef BEGIN_RCPP
#define BEGIN_RCPP
#endif

#ifndef END_RCPP
#define END_RCPP
#endif

using namespace Rcpp;
#ifndef R_NO_REMAP
#define R_NO_REMAP
#endif
#include <Rinternals.h>
#include <nCompiler/nCompiler_Eigen.h>
#include <nCompiler/nCompiler_TBB.h>
#include <nCompiler/nCompiler_class_factory.h>
#include <nCompiler/nCompiler_class_interface.h>

class test_predefined : public genericInterfaceC<test_predefined> {
public:
  double a;
};

SEXP  new_test_predefined (  );


#endif
//--------------------------------------
//--------------------------------------
// nC_derivClass
//--------------------------------------
#ifndef __nC_derivClass_H
#define __nC_derivClass_H
#include <RcppEigen.h>
#include <Rcpp.h>


#ifndef BEGIN_RCPP
#define BEGIN_RCPP
#endif

#ifndef END_RCPP
#define END_RCPP
#endif

using namespace Rcpp;
#ifndef R_NO_REMAP
#define R_NO_REMAP
#endif
#include <Rinternals.h>
#include <nCompiler/nCompiler_Eigen.h>
#include <nCompiler/nCompiler_TBB.h>
#include <nCompiler/nCompiler_class_factory.h>
#include <nCompiler/nCompiler_class_interface.h>

class nC_derivClass : public genericInterfaceC<nC_derivClass> {
public:
  Eigen::Tensor<double, 1> value;
  Eigen::Tensor<double, 2> gradient;
  Eigen::Tensor<double, 3> hessian;
};

SEXP  new_nC_derivClass (  );


#endif
