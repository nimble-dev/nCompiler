// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_value
SEXP get_value(SEXP Xptr, const std::string& name);
RcppExport SEXP _nCompiler_get_value(SEXP XptrSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Xptr(XptrSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_value(Xptr, name));
    return rcpp_result_gen;
END_RCPP
}
// set_value
SEXP set_value(SEXP Xptr, const std::string& name, SEXP Svalue);
RcppExport SEXP _nCompiler_set_value(SEXP XptrSEXP, SEXP nameSEXP, SEXP SvalueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Xptr(XptrSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Svalue(SvalueSEXP);
    rcpp_result_gen = Rcpp::wrap(set_value(Xptr, name, Svalue));
    return rcpp_result_gen;
END_RCPP
}
// call_method
SEXP call_method(SEXP Xptr, const std::string& name, SEXP Sargs);
RcppExport SEXP _nCompiler_call_method(SEXP XptrSEXP, SEXP nameSEXP, SEXP SargsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Xptr(XptrSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Sargs(SargsSEXP);
    rcpp_result_gen = Rcpp::wrap(call_method(Xptr, name, Sargs));
    return rcpp_result_gen;
END_RCPP
}
// new_test_predefined
SEXP new_test_predefined();
RcppExport SEXP _nCompiler_new_test_predefined() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(new_test_predefined());
    return rcpp_result_gen;
END_RCPP
}
// new_nC_derivClass
SEXP new_nC_derivClass();
RcppExport SEXP _nCompiler_new_nC_derivClass() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(new_nC_derivClass());
    return rcpp_result_gen;
END_RCPP
}
// new_EigenDecomp
SEXP new_EigenDecomp();
RcppExport SEXP _nCompiler_new_EigenDecomp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(new_EigenDecomp());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _nCompiler_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nCompiler_get_value", (DL_FUNC) &_nCompiler_get_value, 2},
    {"_nCompiler_set_value", (DL_FUNC) &_nCompiler_set_value, 3},
    {"_nCompiler_call_method", (DL_FUNC) &_nCompiler_call_method, 3},
    {"_nCompiler_new_test_predefined", (DL_FUNC) &_nCompiler_new_test_predefined, 0},
    {"_nCompiler_new_nC_derivClass", (DL_FUNC) &_nCompiler_new_nC_derivClass, 0},
    {"_nCompiler_new_EigenDecomp", (DL_FUNC) &_nCompiler_new_EigenDecomp, 0},
    {"_nCompiler_rcpp_hello_world", (DL_FUNC) &_nCompiler_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_nCompiler(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
