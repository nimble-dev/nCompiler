We have a somewhat unusual include system, for two reaasons:
1. We need it to work easily from dynamically generated nCompiler code. This means we want keep the needs for code-generation relatively simple and non-fragile.
2. We extend Rcpp with new wrap<> and as<> (via templated Exporter classes) overloads. This requires that we first include RcppCommon.h, then any wrap<> or Exporter<> forward declarations, then Rcpp.h. This is described here:
https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-extending.pdf. However, this looks like a somewhat simplified explanation and our case(s) get rather more complicated.

Here is the scheme and associated rules:
1. We set #define flags to indicate what components from this header library are needed, e.g.
   #define NCOMPILER_USES_EIGEN.
2. It is assumed that Rcpp is always needed.
3. All generated .h files will have
   #include "nCompiler_omnibus_first_h.h".
   This will use previously stated #define flags to decide what to include further.
4. nCompiler_omnibus_first_h.h itself is not #ifndef protected. This allows it to be processed multiple times in case one generated header includes a second generated header, and the second one sets a new #define flag for its needs and re-includes "nCompiler_omnibus_first_h.h". The files #included from  "nCompiler_omnibus_first_h.h" should of course have #ifndef protection.
5. Generated .cpp files will (normally) have
   "#include "nCompiler_omnibus_first_cpp.h"
   This will use previously stated  #define flags to decide what to include further. It also has what should be the **ONLY** statement of "#include <Rcpp.h>".
6. In general, headers for each of the components (Rcpp, nClass_interfaces, Eigen, Cereal, and TBB) are in separate directories. There are also directories for some "interaction" components like nClass_interfaces+Eigen and others.
7. There is inclusion across directories because it is necessary.
8. Each component's directory has a "<name>_pre_Rcpp.h" and "<name>_post_Rcpp.h" which contain simple collections of other #include statements. These are generally what is included from "nCompiler_omnibus_first_h.h" and "nCompiler_omnibus_first_cpp.h", respectively. These should NEVER be included from other files, because they don't have their own #ifndef protection and so in theory could recurse infinitely. Inclusion from other files should directly target specific files.
9. Files that have "post_Rcpp" status (i.e. should never be included from a pathway stemming from "nCompiler_omnibus_first_h.h") are placed in subdirectories called post_Rcpp within each component directory. This helps us avoid accidentally including something pre_Rcpp that should be post_Rcpp. They can only be included if the directory path explicitly includes "/post_Rcpp/" so that it sticks out.
10. Code for predefined nClasses does not live in subdirectories and ends up used almost as if generated.

Based on this scheme, here are the RULES:
1. Any code that might actually use Rcpp should be in a post_Rcpp directory.
2. Most code should be pre_Rcpp, unless it uses Rcpp in which case it should be post_Rcpp.
3. The "<name>_pre_Rcpp.h" and "<name>_post_Rcpp.h" should never be included from anywhere except nCompiler_omnibus_first_h.h and nCompiler_omnibus_first_cpp.h. And those latter two files should never be included from anywhere else (except the second includes the first).

Some issues remain to worked out. One is that cereal inclusion can't really be done one a second pass if not done on a first. This may call for future revision or it may require a strict rule that a project must be all-cereal-enabled or not. Also predefined class code handling may need revision to include cereal code only if flagged.
